(dp1
S'output'
p2
S"<type 'exceptions.SyntaxError'> Object exists and cannot be redefined: board_name"
p3
sS'layer'
p4
S'/Users/Joshua/Git Repositories/CMPS 183/web2py/applications/2ndAssignment/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\ndef index():\n    return dict(message="")\n\n@auth.requires_login()\ndef boards():\n    rows = db().select(db.boards.ALL)\n    return dict(boards=rows)\n\ndef create():\n\n    db.boards.board_author.readable = db.boards.board_author.writable = False\n    db.boards.board_last_updated.readable = db.boards.board_last_updated.writable = False\n    db.boards.board_name = \'Name\'\n    db.boards.board_description = \'Description\'\n    form=SQLFORM(db.boards)\n    if form.process().accepted:\n        redirect(URL(\'default\', \'boards\'))\n    return dict(form=form)\n\n# @auth.requires_login()\n# def people():\n#     """\n#     Gives the person a table displaying all the people, to search.\n#     """\n#     db.people.name.label = "Name"\n#     # Creates a list of other people, other than myself.\n#     q = (db.people.id != auth.user_id)\n#     links = [dict(header=\'Click to chat\',\n#                  body = lambda r: A(I(_class=\'fa fa-comments\'), \'Chat\', _class=\'btn btn-success\',\n#                                     _href=URL(\'default\', \'chat\', args=[r.user_id])))]\n#     grid = SQLFORM.grid(q,\n#                         links=links,\n#                         editable=False,\n#                         details=False,\n#                         csv=False)\n#     return dict(grid=grid)\n#\n#\n# def store_message(form):\n#     form.vars.msg_id = str(db2.textblob.insert(mytext = form.vars.msg_id))\n#\n#\n# @auth.requires_login()\n# def chat():\n#     """This page enables you to chat with another person."""\n#     # Let us read the record telling us who is the other person.\n#     other = db(db.people.user_id == request.args(0)).select().first()\n#     logger.info("I am %r, chatting with %r" % (auth.user_id, other))\n#     if other is None:\n#         # Back to square 0.\n#         return redirect(URL(\'default\', \'index\'))\n#     # Pair of people involved.\n#     two_people = [auth.user_id, other.id]\n#     # We want them in order, so that all messages will be stored under the same pairs of ids.\n#     two_people.sort()\n#     # This query selects all messages between the two people.\n#     q = ((db.messages.user0 == two_people[0]) & (db.messages.user1 == two_people[1]))\n#     # This is the list of messages.\n#     db.messages.sender.represent = lambda v, r: \'You\' if v == auth.user_id else other.name\n#     grid = SQLFORM.grid(q,\n#                         fields=[db.messages.msg_time, db.messages.sender, db.messages.msg_id],\n#                         details=False,\n#                         create=False,\n#                         orderby=~db.messages.msg_time,\n#                         csv=False,\n#                         sortable=False,\n#                         editable=False,\n#                         deletable=False,\n#                         searchable=False,\n#                         user_signature=False)\n#\n#     # This is a form for adding one more message.\n#\n#     db.messages.sender.readable = db.messages.sender.writable = False\n#     db.messages.msg_time.readable = db.messages.msg_time.writable = False\n#     form = SQLFORM(db.messages)\n#     form.vars.user0 = two_people[0]\n#     form.vars.user1 = two_people[1]\n#     if form.process(onvalidation=store_message).accepted:\n#         session.flash = "Message sent!"\n#         redirect(URL(\'default\', \'chat\', args=[other.user_id]))\n#\n#     title = "Chat with %s" % other.name\n#     return dict(title=title, grid=grid, form=form)\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    auth.settings.login_next=URL(\'default\', \'boards\')\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\nresponse._vars=response._caller(create)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/Joshua/Git Repositories/CMPS 183/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/Users/Joshua/Git Repositories/CMPS 183/web2py/applications/2ndAssignment/controllers/default.py", line 130, in <module>\n  File "/Users/Joshua/Git Repositories/CMPS 183/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/Joshua/Git Repositories/CMPS 183/web2py/applications/2ndAssignment/controllers/default.py", line 16, in create\n    db.boards.board_name = \'Name\'\n  File "/Users/Joshua/Git Repositories/CMPS 183/web2py/gluon/packages/dal/pydal/objects.py", line 573, in __setattr__\n    raise SyntaxError(\'Object exists and cannot be redefined: %s\' % key)\nSyntaxError: Object exists and cannot be redefined: board_name\n'
p11
s.