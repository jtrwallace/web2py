(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'Rows' object has no attribute 'id'"
p3
sS'layer'
p4
S'/Users/Joshua/Git Repositories/CMPS 183/web2py/applications/5thAssignment/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\nfrom datetime import datetime, timedelta\nfrom gluon import utils as gluon_utils\nimport json\nimport calendar\n\ndef index():\n    redirect(URL(\'default\', \'boards\'))\n    return 0\n\ndef boards():\n    return dict()\n\n@auth.requires_signature()\ndef load_boards():\n    all_boards = db().select(db.boards.ALL)\n    for board in all_boards:\n        board[\'total_count\'] = len(db(db.posts.board_id == board.id).select())\n        board[\'new_today\'] = len(db((db.posts.board_id == board.id) & (db.posts.posting_time >= (datetime.utcnow() - timedelta(days=1)))).select())\n    return response.json(list(all_boards))\n\ndef board():\n    board = db(db.boards.board_id == request.args(0)).select()\n    posts = db(db.posts.board_id == board.id).select(orderby=~db.posts.posting_time)\n    for post in posts:\n        post[\'posting_time_pretty\'] = pretty_date(post[\'posting_time\'])\n    return dict(board=board, posts=posts)\n\n@auth.requires_signature()\ndef add_board():\n    db.boards.update_or_insert((db.boards.board_id == request.vars.board_id),\n            board_id=request.vars.board_id,\n            board_name=request.vars.board_name,\n            board_description=request.vars.board_description,\n            is_draft=json.loads(request.vars.is_draft),\n            active_draft_description=request.vars.active_draft_description,\n            active_draft_name=request.vars.active_draft_name,\n            board_last_updated=request.vars.board_last_updated,\n            board_pretty_updated=request.vars.board_pretty_updated\n            )\n    return "ok"\n\ndef create_post():\n    board = db.boards(request.args(0))\n    db.posts.posting_time.readable = db.posts.posting_time.writable = False\n    db.posts.post_author.readable = db.posts.post_author.writable = False\n    db.posts.board_id.readable = db.posts.board_id.writable = False\n    db.posts.posting_time_pretty.readable = db.posts.posting_time_pretty.writable = False\n    form=SQLFORM(db.posts)\n    form.vars.board_id = board.id\n    if form.process().accepted:\n        board.board_last_updated = datetime.utcnow()\n        board.update_record()\n        try:\n            db.commit()\n        except Exception , e:\n            logger.warning("Transaction commit failed while updating board time")\n            redirect(URL(\'default\', \'create_post\', args=board.id))\n        redirect(URL(\'default\', \'board\', args=board.id))\n    return dict(form=form, board=board)\n\n@auth.requires_signature()\ndef edit_post():\n    post = db.posts(request.args(0))\n    board = post.board_id\n    db.posts.posting_time.readable = db.posts.posting_time.writable = False\n    db.posts.post_author.readable = db.posts.post_author.writable = False\n    db.posts.board_id.readable = db.posts.board_id.writable = False\n    db.posts.posting_time_pretty.readable = db.posts.posting_time_pretty.writable = False\n    db.posts.id.readable = db.posts.id.writable = False\n    form=SQLFORM(db.posts, post)\n    if form.process().accepted:\n        board.board_last_updated = datetime.utcnow()\n        board.update_record()\n        try:\n            db.commit()\n        except Exception , e:\n            logger.warning("Transaction commit failed while updating board time")\n            redirect(URL(\'default\', \'edit_post\', args=[post.id, board.id]))\n        redirect(URL(\'default\', \'board\', args=board.id))\n    return dict(board=board, form=form)\n\n@auth.requires_signature()\ndef delete_post():\n    post = db.posts(request.args(0))\n    board = post.board_id\n    db(db.posts.id == post.id).delete()\n    redirect(URL(\'default\', \'board\', args=board.id))\n    return 0\n\ndef date():\n    date = datetime.utcnow()\n    return response.json(date);\n\ndef pretty_date():\n    date = datetime.utcnow()\n    month_abr = calendar.month_abbr[date.month]\n    pretty = month_abr + " " + str(date.day) + " " + str(date.time().strftime("%H:%M"))\n    return response.json(pretty);\n\ndef pretty_date(date):\n    month_abr = calendar.month_abbr[date.month]\n    pretty = month_abr + " " + str(date.day) + " " + str(date.time().strftime("%H:%M"))\n    return pretty\n\ndef user():\n    #redirect(\'default\', \'board\', args=request.args(1))\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    return response.download(request, db)\n\n\ndef call():\n    return service()\n\n\n\nresponse._vars=response._caller(board)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/Joshua/Git Repositories/CMPS 183/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/Users/Joshua/Git Repositories/CMPS 183/web2py/applications/5thAssignment/controllers/default.py", line 123, in <module>\n  File "/Users/Joshua/Git Repositories/CMPS 183/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/Joshua/Git Repositories/CMPS 183/web2py/applications/5thAssignment/controllers/default.py", line 26, in board\n    posts = db(db.posts.board_id == board.id).select(orderby=~db.posts.posting_time)\nAttributeError: \'Rows\' object has no attribute \'id\'\n'
p11
s.